--STAGE ONE: SQL FUNCTIONS TO WORKING UNIVERSE INVENTORY INTO DATAFRAME

--relevant tables:
        --ats_cid_inv (existing)   --inv_output_uverse (existing)
            --assay_results (new: transitional)  --assay_analysis (new: transitional)

--A. Step 1: FULL OUTER JOIN (UNION) to bring ats and inventory together
    -- Can do IS NULL queries to ensure the invMess functins worked properly -- both tables should show nulls
    -- If want to stop and do NULL queries, add the following to bottom of UNION query:
        --WHERE a.asset_id IS NULL OR u.asset_id IS NULL;

SELECT 
    a.cid AS ats_cid, 
    a.part_no AS ats_part_no, 
    a.asset_id AS ats_asset_id, 
    u.cid AS uverse_cid, 
    u.part_no AS uverse_part_no, 
    u.asset_id AS uverse_asset_id
FROM 
    ats_cid_inv AS a
FULL OUTER JOIN 
    inv_output_uverse AS u
ON 
    a.asset_id = u.asset_id;

--Make FOJ into new table

CREATE TABLE assay_results AS SELECT 
    a.cid AS ats_cid, 
    a.part_no AS ats_part_no, 
    a.asset_id AS ats_asset_id, 
    u.cid AS inv_cid, 
    u.part_no AS inv_part_no, 
    u.asset_id AS inv_asset_id
FROM 
    ats_cid_inv AS a
FULL OUTER JOIN 
    inv_output_uverse AS u
ON 
    a.asset_id = u.asset_id;


--B. Step 2: Convert to single table with tuples

    --a. Add status column to table

-- Alter table to add the new "status" column

ALTER TABLE assay_results
ADD COLUMN status VARCHAR(50);

    --b. update new status field per cases

UPDATE assay_results
SET status = CASE
    WHEN ats_cid IS NULL THEN 'in site/not in ats'
    WHEN inv_cid IS NULL THEN 'in ats/not in site'
    WHEN ats_cid IS NOT NULL AND inv_cid IS NOT NULL THEN 'accurate'
    ELSE NULL
END;

    --c. New assay_analysis table combining values into status field

CREATE TABLE assay_analysis (
    cid VARCHAR(7),
    part_no VARCHAR(50),
    asset_id VARCHAR(14),
    status VARCHAR(50)
);

    --d. Insert data into new assay_analysis table based on values from assay_results table

INSERT INTO assay_analysis (cid, part_no, asset_id, status)
SELECT 
    CASE 
        WHEN status IN ('accurate', 'in ats/not in site') THEN ats_cid
        WHEN status = 'in site/not in ats' THEN inv_cid
    END AS cid,
    CASE 
        WHEN status IN ('accurate', 'in ats/not in site') THEN ats_part_no
        WHEN status = 'in site/not in ats' THEN inv_part_no
    END AS part_no,
    CASE 
        WHEN status IN ('accurate', 'in ats/not in site') THEN ats_asset_id
        WHEN status = 'in site/not in ats' THEN inv_asset_id
    END AS asset_id,
    status
FROM assay_results;

--e. OPTIONAL STEP: check for duplicate records in asset_id to check for success of asset_move function
    -- copy and paste following SQL if want to check:

--SELECT asset_id, COUNT(*) AS count FROM assay_analysis GROUP BY asset_id HAVING COUNT(*) > 1;
