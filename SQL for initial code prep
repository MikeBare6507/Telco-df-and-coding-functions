VARIOUS SQL FUNCTIONS TO BEGIN WORKING INVENTORY TABLE INTO DATAFRAME

FULL OUTER JOIN (UNION) QUERY NEEDED FOR FINDING DISCREPANCIES BETWEEN the theoretical database inventory and the "universe" inventory (actual accurate inventory of sites) that is sampled in for the simulation

SELECT 
    a.cid AS ats_cid, 
    a.part_no AS ats_part_no, 
    a.asset_id AS ats_asset_id, 
    u.cid AS uverse_cid, 
    u.part_no AS uverse_part_no, 
    u.asset_id AS uverse_asset_id
FROM 
    ats_cid_inv AS a
FULL OUTER JOIN 
    inv_output_uverse AS u
ON 
    a.asset_id = u.asset_id;

  --SECOND VERSION TO VIEW NULL VALUES IN BOTH TABLES (thus indicating discrepancies)

SELECT 
    a.cid AS simbase_cid, 
    a.part_no AS simbase_part_no, 
    a.asset_id AS simbase_asset_id, 
    u.cid AS test_cid, 
    u.part_no AS test_part_no, 
    u.asset_id AS test_asset_id
FROM 
    simbase_cid_inv AS a
FULL OUTER JOIN 
    test_ats_output2 AS u
ON 
    a.asset_id = u.asset_id
WHERE 
    a.asset_id IS NULL OR u.asset_id IS NULL;


TURN FULL OUTER JOIN TO NEW TABLE

CREATE TABLE assay_results AS SELECT 
    a.cid AS ats_cid, 
    a.part_no AS ats_part_no, 
    a.asset_id AS ats_asset_id, 
    u.cid AS inv_cid, 
    u.part_no AS inv_part_no, 
    u.asset_id AS inv_asset_id
FROM 
    ats_cid_inv AS a
FULL OUTER JOIN 
    inv_output_uverse AS u
ON 
    a.asset_id = u.asset_id;


--FIRST STEP TO COMBINING TABLES -- creates some of the dependent variables

--Step 1:
-- Alter table to add the new "status" column

ALTER TABLE assay_results
ADD COLUMN status VARCHAR(50);

--STep 2:
-- Update the "status" column based on the specified conditions
UPDATE assay_results
SET status = CASE
    WHEN ats_cid IS NULL THEN 'in site/not in ats'
    WHEN inv_cid IS NULL THEN 'in ats/not in site'
    WHEN ats_cid IS NOT NULL AND inv_cid IS NOT NULL THEN 'accurate'
    ELSE NULL
END;


--CREATE NEW TABLE THAT REMOVES NULL VALUES FROM UNION QUERY BY COMBINING VALUES INTO COLUMNS
-- Step 3: Create the new table "assay_analysis"
CREATE TABLE assay_analysis (
    cid VARCHAR(7),
    part_no VARCHAR(50),
    asset_id VARCHAR(14),
    status VARCHAR(50)
);



-- Step 4: Insert data into "assay_analysis" based on conditions in "assay_results"
INSERT INTO assay_analysis (cid, part_no, asset_id, status)
SELECT 
    CASE 
        WHEN status IN ('accurate', 'in ats/not in site') THEN ats_cid
        WHEN status = 'in site/not in ats' THEN inv_cid
    END AS cid,
    CASE 
        WHEN status IN ('accurate', 'in ats/not in site') THEN ats_part_no
        WHEN status = 'in site/not in ats' THEN inv_part_no
    END AS part_no,
    CASE 
        WHEN status IN ('accurate', 'in ats/not in site') THEN ats_asset_id
        WHEN status = 'in site/not in ats' THEN inv_asset_id
    END AS asset_id,
    status
FROM assay_results;

--Step 5: check for duplicate records in assset_id -- indicating asset move --
--Need to find duplicate asset_id's for cases simulating the movement of an asset from one location to another. Such instances result in there being duplicate asset_id's. Once those have been identified, there additionall needs to be an EXIST query for next-phase processesing

SELECT asset_id, COUNT(*) AS count
FROM assay_analysis
GROUP BY asset_id
HAVING COUNT(*) > 1;
